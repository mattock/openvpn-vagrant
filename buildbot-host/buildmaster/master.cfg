# -*- python -*-
# ex: set filetype=python:

from twisted.internet import defer
from buildbot.plugins import *
from buildbot.plugins import secrets, util
import configparser
import json
import multiprocessing
import os
import random
import time

def get_worker_setting(config, worker_name, setting):
    """Load a worker setting from worker.ini"""
    worker_config = config

    try:
        value = worker_config.get(worker_name, setting)
    except configparser.NoOptionError:
        value = None

    return value

def get_config(name):
    """Return active master configuration"""
    config = configparser.ConfigParser()

    custom = f'{name}.ini'
    default = f'{name}-default.ini'

    if os.path.exists(custom):
        config.read(custom)
    elif os.path.exists(default):
        config.read(default)
    else:
        print(f'ERROR: could not find {custom} or {default}')
        sys.exit(1)

    return config

# Load configuration from configuration files
worker_config = get_config("worker")
master_config = get_config("master")

c = BuildmasterConfig = {}

# Global settings
persistent_dir = os.path.expanduser(os.path.join(basedir, "persistent"))
notify_email = master_config.get("master", "notify_email")
master_fqdn = master_config.get("master", "master_fqdn")
buildbot_url = master_config.get("master", "buildbot_url")
title_url = master_config.get("master", "title_url")
docker_host = master_config.get("docker", "host", raw=True)
docker_network = master_config.get("docker", "network")

# OpenVPN 2 settings
openvpn_repo_url = master_config.get("master", "repo_url")
openvpn_branch = master_config.get("master", "branch")
openvpn_run_tclient_tests = master_config.get("master", "run_tclient_tests")

# Each section in worker.ini represents one buildbot worker. The "DEFAULT"
# section gives the default settings and gets filtered out automatically, i.e.
# does not become a worker.
worker_names = worker_config.sections()
builder_names = []

# Load configuration options used for packaging, connectivity testing and compile tests
build_and_test_config_opt_combos = json.loads(master_config.get("buildconfig", "build_and_test_config_opt_combos"))
compile_config_opt_combos = json.loads(master_config.get("buildconfig", "compile_config_opt_combos"))
packaging_config_opt_combos = json.loads(master_config.get("buildconfig", "packaging_config_opt_combos"))

c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.path.join(persistent_dir, "secrets"))]

c['workers'] = []

# Create normal and latent workers
for worker_name in worker_names:
    if worker_config.get(worker_name, "type") ==  "latent_docker":
      image = worker_config.get(worker_name, "image")
      c['workers'].append(worker.DockerLatentWorker(worker_name,
                                                    worker_config.get(worker_name, "password"),
                                                    max_builds=1,
                                                    notify_on_missing=notify_email,
                                                    docker_host=docker_host,
                                                    followStartupLogs=True,
                                                    image=image,
                                                    masterFQDN="buildmaster",
                                                    volumes=[f'buildbot-worker-{worker_name}:/home/buildbot'],
                                                    hostconfig = { "network_mode": docker_network,
                                                                   "sysctls": { "net.ipv6.conf.all.disable_ipv6": 0 },
                                                                   "cap_add": ["NET_ADMIN"] }))
    else:
        c['workers'].append(worker.Worker(worker_name,
                            util.Secret("worker-password"),
                            max_builds=1,
                            notify_on_missing=notify_email,
                            properties = { 'signing_cert_sha1': get_worker_setting(worker_config, worker_name, 'signing_cert_sha1'), 'timestamp_url': get_worker_setting(worker_config, worker_name, 'timestamp_url')}))

c['protocols'] = {'pb': {'port': 9989}}

c['change_source'] = []
c['change_source'].append(changes.GitPoller(openvpn_repo_url,
                                            workdir='gitpoller-workdir', branch=openvpn_branch,
                                            pollInterval=10))

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                        name="all",
                        change_filter=util.ChangeFilter(branch=openvpn_branch),
                        treeStableTimer=None,
                        builderNames=builder_names))

c['schedulers'].append(schedulers.ForceScheduler(
                        name="force",
                        builderNames=builder_names))

c['builders'] = []

# Allow only two concurrent builds across all latent docker workers
cpus = multiprocessing.cpu_count()
docker_build_lock = util.MasterLock("docker", maxCount=cpus)

# Only allow one docker worker to run t_client tests at the same time. This is
# convenience feature to reduce the number of keys required for t_client tests.
docker_tclient_lock = util.MasterLock("docker", maxCount=1)

factories = {}

def getBuilderNameSuffix(combo):
    """Generate builder name suffix from configure options"""
    if not combo:
      return "-default"
    else:
      return combo.replace(" ", "")

def getFactoryName(combo):
    return f'factory{getBuilderNameSuffix(combo)}'

def can_sign(buildstep):
    """Check if this worker can sign binaries"""
    worker_name = buildstep.worker.workername
    worker_config = configparser.ConfigParser()
    worker_config.read("worker.ini")
    sign_capable = True

    try:
        worker_config.get(worker_name, "timestamp_url")
        worker_config.get(worker_name, "signing_cert_sha1")
    except configparser.NoOptionError:
        sign_capable = False

    return sign_capable


### OpenVPN 2 builds
#
# Load build steps from separate files
#
for steps_file in ["common_unix_steps.cfg", "common_windows_steps.cfg", "debian_packaging_steps.cfg", "tclient_steps.cfg", "unix_compile_steps.cfg"]:
    exec(compile(source=open(os.path.join('openvpn', steps_file)).read(), filename=os.path.join('openvpn', steps_file), mode='exec'))

# Basic OpenVPN compile tests on Unix-style operating systems
for combo in compile_config_opt_combos:
    factory = util.BuildFactory()
    factory = openvpnAddCommonUnixStepsToBuildFactory(factory, combo)
    factory = openvpnAddUnixCompileStepsToBuildFactory(factory, combo)
    factory_name = getFactoryName(combo)
    factories.update({factory_name: (factory, 'unix', 'default')})
    del factory

# Connectivity tests on Unix-style operating systems
if openvpn_run_tclient_tests == "True":
    for combo in build_and_test_config_opt_combos:
        factory = util.BuildFactory()
        factory = openvpnAddCommonUnixStepsToBuildFactory(factory, combo)
        factory = openvpnAddUnixCompileStepsToBuildFactory(factory, combo)
        factory = openvpnAddTClientStepsToBuildFactory(factory, combo)
        factory_name = getFactoryName(combo)
        factories.update({factory_name: (factory, 'unix', 'default')})
        del factory

# Debian and Ubuntu packaging
#
for combo in packaging_config_opt_combos:
    factory = util.BuildFactory()
    factory = openvpnAddCommonUnixStepsToBuildFactory(factory, "")
    factory = openvpnAddDebianPackagingStepsToBuildFactory(factory, "")
    factory_name = getFactoryName("-package")
    factories.update({factory_name: (factory, 'unix', 'debian')})
    del factory

# Windows msbuild tests
factory = util.BuildFactory()
factory = openvpnAddCommonWindowsStepsToBuildFactory(factory, combo)
factory_name = "msbuild"
factories.update({factory_name: (factory, 'windows', 'default')})
del factory

# Create the builders
for factory_name, factory in factories.items():
    for worker_name in worker_names:
      # Check if this factory is applicable for the worker's operating system
      if not factory[1] == worker_config.get(worker_name, "ostype"):
          continue

      # Check if this worker can build Debian packages
      if factory[2] == "debian" and (worker_config.get(worker_name, "can_package_debian") != "true"):
          continue

      # Concurrent docker builds utilize a shared master lock in counting mode.
      # In human-speak we only allow two concurrent Docker builders to run at
      # any given time.
      if worker_config.get(worker_name, "type") == "latent_docker":
          # Builder-level locks affect the entire build
          locks = [docker_build_lock.access('counting')]
      else:
          locks = None

      builder_name = f'{worker_name}-{factory_name}'
      c['builders'].append(
          util.BuilderConfig(name=builder_name,
                                workernames=[worker_name],
                                factory=factory[0],
                                locks=locks))

      builder_names.append(builder_name)

c['services'] = []
c['title'] = "OpenVPN Buildbot"
c['titleURL'] = title_url
c['buildbotURL'] = buildbot_url
c['www'] = {
    'port': 8010,
    'plugins': { 'waterfall_view': True, }
}

c['db'] = {
    'db_url' : f'sqlite:////{persistent_dir}/libstate.sqlite',
}
